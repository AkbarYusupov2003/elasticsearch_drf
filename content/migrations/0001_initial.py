# Generated by Django 4.2.6 on 2023-10-30 12:24

import colorfield.fields
import content.etc.filename_path
import datetime
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import stdimage.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AllowedCountry',
            fields=[
                ('country_code', models.CharField(choices=[('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BW', 'Botswana'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('IO', 'British Indian Ocean Territory'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos (Keeling) Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('TP', 'East Timor'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('ET', 'Ethiopia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji Islands'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('VA', 'Holy See (Vatican City State)'), ('HN', 'Honduras'), ('HK', 'Hong Kong'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('CI', 'Ivory Coast'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KE', 'Kenya'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LS', 'Lesotho'), ('LR', 'Liberia'), ('LY', 'Libyan Arab Jamahiriya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macao'), ('MK', 'North Macedonia'), ('MG', 'Madagascar'), ('MW', 'Malawi'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('MX', 'Mexico'), ('FM', 'Micronesia, Federated States of'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestine'), ('PA', 'Panama'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('ST', 'Sao Tome and Principe'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('ZA', 'South Africa'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('SS', 'South Sudan'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SD', 'Sudan'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SZ', 'Swaziland'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('TJ', 'Tajikistan'), ('TZ', 'Tanzania'), ('TH', 'Thailand'), ('CD', 'The Democratic Republic of Congo'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UG', 'Uganda'), ('UA', 'Ukraine'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('UM', 'United States Minor Outlying Islands'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('VG', 'Virgin Islands, British'), ('VI', 'Virgin Islands, U.S.'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'), ('ALL', 'All Countries')], max_length=3, primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'Страна для разрешения',
                'verbose_name_plural': 'Страны для разрешения',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('name_en', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('name_uz', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('icon', models.ImageField(help_text='Поддерживается размер icon 90x90 px', null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='', verbose_name='Картинка icon')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(max_length=200, null=True, verbose_name='Название контента на [Русский]')),
                ('slogan_ru', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган на [Русский]')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('is_ru', models.BooleanField(default=False, verbose_name='доступен на языке [Русский]')),
                ('title_en', models.CharField(max_length=200, null=True, verbose_name='Название контента на [Русский]')),
                ('slogan_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган на [Русский]')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('is_en', models.BooleanField(default=False, verbose_name='доступен на языке [Русский]')),
                ('title_uz', models.CharField(max_length=200, null=True, verbose_name='Название контента на [Русский]')),
                ('slogan_uz', models.CharField(blank=True, max_length=200, null=True, verbose_name='Слоган на [Русский]')),
                ('description_uz', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('is_uz', models.BooleanField(default=False, verbose_name='доступен на языке [Русский]')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('year', models.PositiveSmallIntegerField(default=2022, verbose_name='Дата выхода')),
                ('age_restrictions', models.PositiveSmallIntegerField(choices=[(0, '0+'), (6, '6+'), (12, '12+'), (16, '16+'), (18, '18+')], default='0+', verbose_name='Возрастные ограничения')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('logo_image_square', stdimage.models.StdImageField(default='static/placeholders/logo_image_square.png', force_min_size=False, help_text='Рекомендуемое соотношение сторон 1x1<br>Минимальный размер 600px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (600, 600)}, verbose_name='Лого медиа квадрат')),
                ('logo_image_rectangle', stdimage.models.StdImageField(default='static/placeholders/logo_image_rectangle.png', force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9<br>Минимальный размер 600px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (600, -1)}, verbose_name='Лого медиа прямоуг')),
                ('poster_v', stdimage.models.StdImageField(default='static/placeholders/poster_v.jpg', force_min_size=False, help_text='Рекомендуемое соотношение сторон 4x7<br>Минимальный размер 240,360px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (240, 360)}, verbose_name='Постер вертикальный')),
                ('poster_h', stdimage.models.StdImageField(default='static/placeholders/poster_h.jpg', force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9<br>Минимальный размер 336x189px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'promo': (600, 300), 'resized': (336, 189)}, verbose_name='Постер горизонтальный')),
                ('bg_image', stdimage.models.StdImageField(default='static/placeholders/bg_image.jpg', force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9<br>Минимальный размер 1920px', max_length=200, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'resized': (600, 600)}, verbose_name='Фоновая картинка')),
                ('rating', models.FloatField(default=10, verbose_name='Рэйтинг')),
                ('rating_count', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Количество оценок')),
                ('is_new', models.BooleanField(default=False, verbose_name='Премьера')),
                ('is_soon', models.BooleanField(default=False, verbose_name='Скоро...')),
                ('is_free', models.BooleanField(default=False, verbose_name='Бесплатно')),
                ('is_russian', models.BooleanField(default=False, verbose_name='Русский контент')),
                ('is_4k', models.BooleanField(default=False)),
                ('is_full_hd', models.BooleanField(default=False)),
                ('duration', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Длительность')),
                ('draft', models.BooleanField(default=True, verbose_name='Черновик')),
                ('is_serial', models.BooleanField(choices=[(True, 'Да, это Сериал'), (False, 'Нет, это Фильм')], verbose_name='Это сериал? ')),
                ('ordering', models.PositiveIntegerField(default=100, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Контент',
                'verbose_name_plural': '!Контент 0 Full',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ContentCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(max_length=200, verbose_name='Название коллекции на [Русский]')),
                ('title_en', models.CharField(max_length=200, verbose_name='Название коллекции на [Русский]')),
                ('title_uz', models.CharField(max_length=200, verbose_name='Название коллекции на [Русский]')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='Рекомендация')),
                ('is_kids', models.BooleanField(default=False, verbose_name='Детская коллекция')),
                ('ordering', models.PositiveSmallIntegerField(blank=True, default=10, null=True, verbose_name='Позиция в списке')),
                ('picture', stdimage.models.StdImageField(force_min_size=False, help_text='Рекомендуемый размер 1x1', max_length=250, null=True, upload_to='collection_pictures/', variations={'large': (1080, 1080), 'medium': (768, 768), 'small': (200, 200), 'thumb': (75, 75)}, verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Коллекция',
                'verbose_name_plural': 'Коллекции',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='ContentRelated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(max_length=200, verbose_name='Название связанного контента на [Русский]')),
                ('title_en', models.CharField(max_length=200, verbose_name='Название связанного контента на [Русский]')),
                ('title_uz', models.CharField(max_length=200, verbose_name='Название связанного контента на [Русский]')),
            ],
            options={
                'verbose_name': 'Связанный Контент',
                'verbose_name_plural': 'Связанные Контенты',
            },
        ),
        migrations.CreateModel(
            name='ContentSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(max_length=60, verbose_name='Название на [Русский]')),
                ('description_ru', models.CharField(max_length=500, verbose_name='Описание на [Русский]')),
                ('description_list_ru', models.TextField(blank=True, max_length=1500, null=True, verbose_name='Описание на [Русский]')),
                ('title_en', models.CharField(max_length=60, verbose_name='Название на [Русский]')),
                ('description_en', models.CharField(max_length=500, verbose_name='Описание на [Русский]')),
                ('description_list_en', models.TextField(blank=True, max_length=1500, null=True, verbose_name='Описание на [Русский]')),
                ('title_uz', models.CharField(max_length=60, verbose_name='Название на [Русский]')),
                ('description_uz', models.CharField(max_length=500, verbose_name='Описание на [Русский]')),
                ('description_list_uz', models.TextField(blank=True, max_length=1500, null=True, verbose_name='Описание на [Русский]')),
                ('limit_sessions', models.PositiveSmallIntegerField(default=3, verbose_name='Лимит сессий')),
                ('price', models.PositiveIntegerField(verbose_name='Цена подписки в месяц в тийинах')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
                ('color', colorfield.fields.ColorField(blank=True, default=None, image_field=None, max_length=25, null=True, samples=None, verbose_name='Цвет')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Icon')),
                ('archive', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Подписка',
                'verbose_name_plural': 'Подписки',
                'db_table': 'users_subscription',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('name_en', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('name_uz', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='CrowdAudio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(editable=False, max_length=550, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Все Аудио',
                'verbose_name_plural': 'Все Аудио',
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='CrowdVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(editable=False, max_length=255, unique=True, verbose_name='Название')),
                ('duration', models.PositiveIntegerField(default=0, verbose_name='Длительность')),
                ('is_mark_for_deletion', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Все Видео',
                'verbose_name_plural': 'Все Видео',
                'ordering': ('slug',),
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('name_en', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('name_uz', models.CharField(max_length=70, verbose_name='Название на [Русский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
                ('picture', stdimage.models.StdImageField(force_min_size=False, help_text='Рекомендуемый размер 1x1', max_length=250, null=True, upload_to='genre_pictures/', variations={'large': (1080, 1080), 'medium': (768, 768), 'small': (200, 200), 'thumb': (75, 75)}, verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Жанр',
                'verbose_name_plural': 'Жанры',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('name_en', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('name_uz', models.CharField(max_length=100, verbose_name='Имя на [Русский]')),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
                ('profile_pic', stdimage.models.StdImageField(blank=True, force_min_size=False, help_text='Соотношение сторон фото 1х1', null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to='', variations={'large': (1080, 1080), 'medium': (768, 768), 'resized': (600, 600), 'small': (200, 200), 'thumb': (75, 75)}, verbose_name='Фото')),
                ('is_actor', models.BooleanField(default=True, verbose_name='Актер?')),
                ('is_scenario', models.BooleanField(default=True, verbose_name='Сценарист?')),
                ('is_producer', models.BooleanField(default=True, verbose_name='Продюсер?')),
                ('is_director', models.BooleanField(default=True, verbose_name='Режиссер?')),
            ],
            options={
                'verbose_name': 'Участник',
                'verbose_name_plural': 'Участники',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='SLUG')),
                ('ordering', models.PositiveSmallIntegerField(default=10, verbose_name='Позиция в списке')),
            ],
            options={
                'verbose_name': 'Спонсор',
                'verbose_name_plural': 'Спонсоры',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Trailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название трейлера на [Русский]')),
                ('sub_ru', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_ru', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('title_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название трейлера на [Русский]')),
                ('sub_en', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_en', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('title_uz', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название трейлера на [Русский]')),
                ('sub_uz', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_uz', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('picture', stdimage.models.StdImageField(blank=True, force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9', max_length=200, null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to=content.etc.filename_path.trailer_picture_filename, variations={'resized': (320, -1)}, verbose_name='Картинка')),
                ('duration', models.PositiveSmallIntegerField(default=0, verbose_name='Длительность')),
                ('trailer_numb', models.PositiveSmallIntegerField(help_text='Номер трейлера должен быть уникальным <br>Номер трейлера 1 - Тизер', verbose_name='Номер трейлера')),
                ('audio_en', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trailer_audio_en', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('audio_ru', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trailer_audio_ru', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('audio_uz', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trailer_audio_uz', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('content', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trailer', to='content.content')),
                ('video_hls', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.crowdvideo')),
            ],
            options={
                'verbose_name': 'Трейлер',
                'verbose_name_plural': 'Трейлеры',
                'ordering': ('trailer_numb',),
            },
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_numb', models.PositiveSmallIntegerField(verbose_name='Номер сезона')),
                ('serial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='content.content')),
            ],
            options={
                'verbose_name': 'Сезон',
                'verbose_name_plural': 'Сезоны --> Эпизоды',
                'ordering': ('season_numb',),
            },
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sub_ru', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_ru', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('sub_en', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_en', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('sub_uz', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_uz', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('duration', models.PositiveSmallIntegerField(default=0, verbose_name='Длительность')),
                ('opening_start_time', models.TimeField(default=datetime.time(0, 0), verbose_name='Начальное время opening')),
                ('opening_end_time', models.TimeField(default=datetime.time(0, 0), verbose_name='Конечное время opening')),
                ('final_start_time', models.TimeField(default=datetime.time(0, 0), verbose_name='Начальное время final')),
                ('audio_en', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='film_audio_en', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('audio_ru', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='film_audio_ru', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('audio_uz', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='film_audio_uz', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('film', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='film_video', to='content.content', unique=True)),
                ('video_hls', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.crowdvideo')),
            ],
            options={
                'verbose_name': 'Фильм',
                'verbose_name_plural': 'Фильм',
            },
        ),
        migrations.CreateModel(
            name='Episode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title_ru', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название эпизода на [Русский]')),
                ('description_ru', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('sub_ru', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_ru', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('title_en', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название эпизода на [Русский]')),
                ('description_en', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('sub_en', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_en', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('title_uz', models.CharField(blank=True, max_length=200, null=True, verbose_name='Название эпизода на [Русский]')),
                ('description_uz', models.TextField(blank=True, null=True, verbose_name='Описание на [Русский]')),
                ('sub_uz', models.FileField(blank=True, null=True, upload_to=content.etc.filename_path.content_subs_filename, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['vtt'])], verbose_name='Субтитры на [Русский]')),
                ('is_sub_uz', models.BooleanField(default=False, editable=False, verbose_name='Добавлено')),
                ('picture', stdimage.models.StdImageField(blank=True, force_min_size=False, help_text='Рекомендуемое соотношение сторон 16х9', max_length=200, null=True, storage=django.core.files.storage.FileSystemStorage(), upload_to=content.etc.filename_path.episode_picture_filename, variations={'resized': (320, -1)}, verbose_name='Картинка')),
                ('duration', models.PositiveSmallIntegerField(default=0, verbose_name='Длительность')),
                ('episode_numb', models.PositiveSmallIntegerField(help_text='Номер эпизода должен быть уникальным', verbose_name='Номер эпизода')),
                ('opening_start_time', models.TimeField(default=datetime.time(0, 0), verbose_name='Начальное время opening')),
                ('opening_end_time', models.TimeField(default=datetime.time(0, 0), verbose_name='Конечное время opening')),
                ('final_start_time', models.TimeField(default=datetime.time(0, 0), verbose_name='Начальное время final')),
                ('draft', models.BooleanField(default=False, verbose_name='Черновик')),
                ('audio_en', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='episode_audio_en', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('audio_ru', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='episode_audio_ru', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('audio_uz', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='episode_audio_uz', to='content.crowdaudio', verbose_name='Аудиодорожка на [Русский]')),
                ('seasons', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='episodes', to='content.season')),
                ('video_hls', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.crowdvideo')),
            ],
            options={
                'verbose_name': 'Эпизод',
                'verbose_name_plural': 'Эпизоды',
                'ordering': ['episode_numb', '-id'],
            },
        ),
        migrations.CreateModel(
            name='ContentSponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_sponsors', to='content.content')),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.sponsor')),
            ],
            options={
                'db_table': 'content_content_sponsors',
                'ordering': ('ordering',),
                'unique_together': {('content', 'sponsor')},
            },
        ),
        migrations.CreateModel(
            name='ContentScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_scenarios', to='content.content')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.person')),
            ],
            options={
                'db_table': 'content_content_scenario',
                'ordering': ('ordering',),
                'unique_together': {('content', 'person')},
            },
        ),
        migrations.CreateModel(
            name='ContentProducer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_producers', to='content.content')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.person')),
            ],
            options={
                'db_table': 'content_content_producer',
                'ordering': ('ordering',),
                'unique_together': {('content', 'person')},
            },
        ),
        migrations.CreateModel(
            name='ContentGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_genres', to='content.content')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.genre')),
            ],
            options={
                'db_table': 'content_content_genres',
                'ordering': ('ordering',),
                'unique_together': {('content', 'genre')},
            },
        ),
        migrations.CreateModel(
            name='ContentDirector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_directors', to='content.content')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.person')),
            ],
            options={
                'db_table': 'content_content_director',
                'ordering': ('ordering',),
                'unique_together': {('content', 'person')},
            },
        ),
        migrations.CreateModel(
            name='ContentCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_countries', to='content.content')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.country')),
            ],
            options={
                'db_table': 'content_content_country',
                'ordering': ('ordering',),
                'unique_together': {('content', 'country')},
            },
        ),
        migrations.CreateModel(
            name='ContentCollectionContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(blank=True, default=10, null=True, verbose_name='Позиция в списке')),
                ('collection_content', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_collection', to='content.contentcollection')),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection', to='content.content')),
            ],
            options={
                'verbose_name': 'Контент',
                'verbose_name_plural': 'Контенты',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='ContentActor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(default=10)),
                ('content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_actors', to='content.content')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.person')),
            ],
            options={
                'db_table': 'content_content_actors',
                'ordering': ('ordering',),
                'unique_together': {('content', 'person')},
            },
        ),
        migrations.AddField(
            model_name='content',
            name='actors',
            field=models.ManyToManyField(blank=True, related_name='actors', through='content.ContentActor', to='content.person', verbose_name='В ролях'),
        ),
        migrations.AddField(
            model_name='content',
            name='allowed_countries',
            field=models.ManyToManyField(blank=True, to='content.allowedcountry', verbose_name='Разрешенные страны'),
        ),
        migrations.AddField(
            model_name='content',
            name='allowed_subscriptions',
            field=models.ManyToManyField(to='content.contentsubscription', verbose_name='Разрешенные подписки'),
        ),
        migrations.AddField(
            model_name='content',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contents', to='content.category'),
        ),
        migrations.AddField(
            model_name='content',
            name='country',
            field=models.ManyToManyField(blank=True, related_name='country', through='content.ContentCountry', to='content.country', verbose_name='Страна'),
        ),
        migrations.AddField(
            model_name='content',
            name='director',
            field=models.ManyToManyField(blank=True, related_name='director', through='content.ContentDirector', to='content.person', verbose_name='Режиссер'),
        ),
        migrations.AddField(
            model_name='content',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='genres', through='content.ContentGenre', to='content.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='content',
            name='producer',
            field=models.ManyToManyField(blank=True, related_name='producer', through='content.ContentProducer', to='content.person', verbose_name='Продюсер'),
        ),
        migrations.AddField(
            model_name='content',
            name='scenario',
            field=models.ManyToManyField(blank=True, related_name='scenario', through='content.ContentScenario', to='content.person', verbose_name='Сценарист'),
        ),
        migrations.AddField(
            model_name='content',
            name='sponsors',
            field=models.ManyToManyField(blank=True, related_name='sponsors', through='content.ContentSponsor', to='content.sponsor', verbose_name='Спонсоры'),
        ),
        migrations.AddField(
            model_name='category',
            name='countries',
            field=models.ManyToManyField(blank=True, related_name='cat_countries', to='content.country', verbose_name='Страны'),
        ),
        migrations.AddField(
            model_name='category',
            name='genres',
            field=models.ManyToManyField(blank=True, related_name='cat_genres', to='content.genre', verbose_name='Жанры'),
        ),
        migrations.AddField(
            model_name='category',
            name='sponsors',
            field=models.ManyToManyField(blank=True, related_name='cat_sponsors', to='content.sponsor', verbose_name='Спонсоры'),
        ),
        migrations.CreateModel(
            name='ContentInfoFilm',
            fields=[
            ],
            options={
                'verbose_name': '!Контент фильм',
                'verbose_name_plural': '!Контент 1 Film Trailer',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('content.content',),
        ),
        migrations.CreateModel(
            name='ContentRelatedContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordering', models.PositiveSmallIntegerField(blank=True, default=10, null=True, verbose_name='Позиция в списке')),
                ('content', models.OneToOneField(help_text='Контент должен быть уникальным', on_delete=django.db.models.deletion.CASCADE, related_name='related', to='content.content')),
                ('content_related_content', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='content_related', to='content.contentrelated')),
            ],
            options={
                'verbose_name': 'Контент',
                'verbose_name_plural': 'Контенты',
                'ordering': ('ordering',),
                'unique_together': {('content', 'content_related_content')},
            },
        ),
    ]
